@using Despro.Blazor.Form.Components.Checkboxes
@using Despro.Blazor.Table.TableRepository.Interface.Table

@typeparam TTableItem
@inherits TableRowBase<TTableItem>

@if (IsSearch)
{
    var i = 2;
    @foreach (IColumn<TTableItem> column in Table.VisibleColumns)
    {
        var j = i;
        <td data-label="@column.Title" style="@GetColumnWidth(column)" class="@GetColumnClass(column)"
            @onclick="RowClick" @onkeydown="@(Table.KeyboardNavigation ? (e) => OnKeyDown(e, TableCells[j]): null)"
            @ref="TableCells[j]">
            @if (column.Template != null)
            {
                @column.Template(Item)
            }
            else if (column.Property != null)
            {
                @column.GetValue(Item)
            }
        </td>
        i++;
    }
}
else
{
    <tr class="@GetRowCssClass(Item)">
        @if (Table.ShowCheckboxes)
        {
            <td class="w-1" @onkeydown="@(Table.KeyboardNavigation ? (e) => OnKeyDown(e, TableCells[0]): null)" @ref="TableCells[0]">
                <Checkbox Value="IsSelected(Item)" ValueChanged="(() => Table.SetSelectedItem(Item))" />
            </td>
        }

        <td class="w-1" @onkeydown="@(Table.KeyboardNavigation ? (e) => OnKeyDown(e, TableCells[0]): null)" @ref="TableCells[0]">
            @(Index + ((PageNumber - 1) * PageSize))
        </td>

        @{
            var i = 2;
            @foreach (IColumn<TTableItem> column in Table.VisibleColumns)
            {
                var j = i;
                <td data-label="@column.Title" style="@GetColumnWidth(column)" class="@GetColumnClass(column)"
                    @onclick="RowClick" @onkeydown="@(Table.KeyboardNavigation ? (e) => OnKeyDown(e, TableCells[j]): null)"
                    @ref="TableCells[j]">
                    @if (column.Template != null)
                    {
                        @column.Template(Item)
                    }
                    else if (column.Property != null)
                    {
                        @column.GetValue(Item)
                    }
                </td>
                i++;
            }
        }

      @*   @if (Table.HasRowActions && !Table.HasActionColumn)
        {
            <td @onkeydown="@(Table.KeyboardNavigation ? (e) => OnKeyDown(e, TableCells[1]): null)" @onclick="RowClick" @ref="TableCells[1]">
                <div class="row-action" @onclick:stopPropagation>

                    @if (Table.RowActionTemplate != null)
                    {
                        @Table.RowActionTemplate(Item)
                    }

                    @if (CanEdit())
                    {
                        <button class="tabicon" aria-label="Button" @onclick="Edit" tabindex="@GetTabIndex()">
                            <Icon class="icon" IconType="@InternalIcons.Edit" />
                        </button>
                    }

                    @if (CanDelete())
                    {
                        <button class="tabicon" aria-label="Button" @onclick="Delete" tabindex="@GetTabIndex()">
                            <Icon class="icon" IconType="@InternalIcons.Trash" />
                        </button>
                    }

                    @if (Table.RowActionEndTemplate != null)
                    {
                        @Table.RowActionEndTemplate(Item)
                    }
                </div>
            </td>
        } *@
    </tr>
}